version: "3.8"

services:
  backend:
    build:
      context: ./BE
    container_name: go_backend
    env_file:
      - .env
    ports:
      - "8080:8080"
    networks:
      - web_net
    restart: always
    healthcheck:
      test: [ "CMD", "wget", "-qO", "http://localhost:8080/api/healthcheck" ]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./FE
    container_name: react_frontend
    volumes:
      - frontend_build:/usr/share/nginx/html
    networks:
      - web_net
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost" ]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:stable-alpine
    container_name: nginx_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - certbot-etc:/etc/letsencrypt
      - certbot-www:/var/www/certbot
      - frontend_build:/usr/share/nginx/html
    depends_on:
      - backend
      - frontend
    networks:
      - web_net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    entrypoint: >
      sh -c "certbot certonly --webroot
      --webroot-path=/var/www/certbot
      --email your@email.com --agree-tos --no-eff-email
      -d timetransit.net -d www.timetransit.net"

volumes:
  frontend_build:
  certbot-etc:
  certbot-www:

networks:
  web_net:
    driver: bridge

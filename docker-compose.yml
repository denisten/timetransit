version: "3.8"

services:
  go_backend:
    container_name: go_backend
    build:
      context: ./BE
    env_file:
      - .env
    ports:
      - "8080:8080"
    networks:
      - web_net
    restart: always
    healthcheck:
      test: ["CMD", "wget", "-qO", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  react_frontend:
    container_name: react_frontend
    build:
      context: ./FE
    volumes:
      - frontend_build:/usr/share/nginx/html:ro
    networks:
      - web_net
    restart: always

  nginx_proxy:
    image: nginx:stable-alpine
    container_name: nginx_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - frontend_build:/usr/share/nginx/html:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
#      - ./letsencrypt:/etc/letsencrypt:ro
      - ./certbot-www:/var/www/certbot
      - certbot-etc:/etc/letsencrypt
    depends_on:
      - go_backend
      - react_frontend
    networks:
      - web_net
    restart: always

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
#      - ./letsencrypt:/etc/letsencrypt
      - certbot-etc:/etc/letsencrypt
      - ./certbot-www:/var/www/certbot
    entrypoint: /bin/sh -c
    command: "trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot; sleep 12h & wait $${!}; done"
    networks:
      - web_net
    restart: always

volumes:
  frontend_build:
  certbot-etc:

networks:
  web_net:
    driver: bridge
